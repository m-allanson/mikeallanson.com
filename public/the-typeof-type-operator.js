import{mdx as e}from"@mdx-js/preactmdx-js/preact.js";const r={title:"The `typeof` Type Operator",slug:"/the-typeof-type-operator",date:"2021-10-28",tags:["typescript"]},s="wrapper";function a({components:t,...n}){return e(s,Object.assign({components:t},n),e("h1",{id:"the-typeof-type-operator",is:"postHeading"},"The ",e("inlineCode",{parentName:"h1"},"typeof")," Type Operator"),e("p",null,"This is part 2 of my notes from working through the ",e("a",{href:"https://www.typescriptlang.org/play?#gist/927ccc66ae3022dc64c4f650109b937a-1",parentName:"p"},e("em",{parentName:"a"},"Beginner 1")," exercise from TypeScript's ",e("em",{parentName:"a"},"Type | Treat 2021")),". ",e("a",{href:"/literal-types-and-as-const",parentName:"p"},"Part 1 can be found here")),e("h2",{id:"typeof",is:"postHeading"},e("a",{href:"#typeof",parentName:"h2"},e("inlineCode",{parentName:"a"},"typeof"))),e("p",null,e("a",{href:"https://www.typescriptlang.org/docs/handbook/2/typeof-types.html",parentName:"p"},"TypeScript's ",e("inlineCode",{parentName:"a"},"typeof")," operator")," can be used in a ",e("em",{parentName:"p"},"type context")," to refer to the type of a variable or property. It's a complement to JavaScript's ",e("inlineCode",{parentName:"p"},"typeof")," operator, which works similarly but in an ",e("em",{parentName:"p"},"expression context"),"."),e("p",null,"Use ",e("inlineCode",{parentName:"p"},"typeof")," to refer to the type of the provided value."),e("h2",{id:"type-index-syntax",is:"postHeading"},e("a",{href:"#type-index-syntax",parentName:"h2"},"Type Index Syntax")),e("p",null,"When using ",e("a",{href:"https://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html",parentName:"p"},"Indexed Access Types"),", there's a convenient helper for capturing the type of an array's elements. It looks something like ",e("inlineCode",{parentName:"p"},"typeof MyArray[number]"),"."),e("h2",{id:"all-together",is:"postHeading"},e("a",{href:"#all-together",parentName:"h2"},"All Together")),e("p",null,"Putting all these features together gives us an approach to this problem. In short, the answer looks something like this:"),e("codeblock",{className:"language-ts",codestring:'const MyArray = [\\"a\\", \\"b\\", \\"c\\"] as const;\\n\\ntype Letter = typeof MyArray[number];\\n//   ^? type Letter = \\"a\\" | \\"b\\" | \\"c\\"'},e("pre",{className:"prism-code language-ts",style:{color:"#d6deeb",backgroundColor:"transparent"},parentName:"codeblock"},e("div",{className:"token-line",style:{color:"#d6deeb"},parentName:"pre"},e("span",{className:"token keyword",style:{color:"rgb(127, 219, 202)"},parentName:"div"},"const"),e("span",{className:"token plain",parentName:"div"}," MyArray "),e("span",{className:"token operator",style:{color:"rgb(127, 219, 202)"},parentName:"div"},"="),e("span",{className:"token plain",parentName:"div"}," "),e("span",{className:"token punctuation",style:{color:"rgb(199, 146, 234)"},parentName:"div"},"["),e("span",{className:"token string",style:{color:"rgb(173, 219, 103)"},parentName:"div"},'"a"'),e("span",{className:"token punctuation",style:{color:"rgb(199, 146, 234)"},parentName:"div"},","),e("span",{className:"token plain",parentName:"div"}," "),e("span",{className:"token string",style:{color:"rgb(173, 219, 103)"},parentName:"div"},'"b"'),e("span",{className:"token punctuation",style:{color:"rgb(199, 146, 234)"},parentName:"div"},","),e("span",{className:"token plain",parentName:"div"}," "),e("span",{className:"token string",style:{color:"rgb(173, 219, 103)"},parentName:"div"},'"c"'),e("span",{className:"token punctuation",style:{color:"rgb(199, 146, 234)"},parentName:"div"},"]"),e("span",{className:"token plain",parentName:"div"}," "),e("span",{className:"token keyword",style:{color:"rgb(127, 219, 202)"},parentName:"div"},"as"),e("span",{className:"token plain",parentName:"div"}," "),e("span",{className:"token keyword",style:{color:"rgb(127, 219, 202)"},parentName:"div"},"const"),e("span",{className:"token punctuation",style:{color:"rgb(199, 146, 234)"},parentName:"div"},";"),e("span",{className:"token plain",parentName:"div"})),e("div",{className:"token-line",style:{color:"#d6deeb"},parentName:"pre"},e("span",{className:"token plain",style:{display:"inline-block"},parentName:"div"},`
`)),e("div",{className:"token-line",style:{color:"#d6deeb"},parentName:"pre"},e("span",{className:"token plain",parentName:"div"}),e("span",{className:"token keyword",style:{color:"rgb(127, 219, 202)"},parentName:"div"},"type"),e("span",{className:"token plain",parentName:"div"}," "),e("span",{className:"token class-name",style:{color:"rgb(255, 203, 139)"},parentName:"div"},"Letter"),e("span",{className:"token plain",parentName:"div"}," "),e("span",{className:"token operator",style:{color:"rgb(127, 219, 202)"},parentName:"div"},"="),e("span",{className:"token plain",parentName:"div"}," "),e("span",{className:"token keyword",style:{color:"rgb(127, 219, 202)"},parentName:"div"},"typeof"),e("span",{className:"token plain",parentName:"div"}," MyArray"),e("span",{className:"token punctuation",style:{color:"rgb(199, 146, 234)"},parentName:"div"},"["),e("span",{className:"token builtin",style:{color:"rgb(130, 170, 255)"},parentName:"div"},"number"),e("span",{className:"token punctuation",style:{color:"rgb(199, 146, 234)"},parentName:"div"},"]"),e("span",{className:"token punctuation",style:{color:"rgb(199, 146, 234)"},parentName:"div"},";"),e("span",{className:"token plain",parentName:"div"})),e("div",{className:"token-line",style:{color:"#d6deeb"},parentName:"pre"},e("span",{className:"token plain",parentName:"div"}),e("span",{className:"token comment",style:{color:"rgb(99, 119, 119)",fontStyle:"italic"},parentName:"div"},'//   ^? type Letter = "a" | "b" | "c"')))),e("p",null,e("a",{href:"https://www.typescriptlang.org/play?ssl=4&ssc=8&pln=1&pc=1#code/MYewdgzgLgBAsgTwIICcUEMEwLwwNowDk6hANEQEZlHCEwC6M6EMokUA3AFBdQIAOAUxgAZQVCiCUOGHyEgAZvGRpMeMAFcAthSn1uAegMwTAPQD8XIA",parentName:"p"},"Playground link")))}a.isMDXComponent=!0;var o=a;export{o as default,r as meta};
